package com.aumaid.bochihhott.Trash;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.aumaid.bochihhott.Adapters.CartItemAdapter;
import com.aumaid.bochihhott.CheckOut.CheckOutActivity;
import com.aumaid.bochihhott.Interfaces.RecyclerViewListener;
import com.aumaid.bochihhott.Models.CartItem_;
import com.aumaid.bochihhott.Models.FoodItem;
import com.aumaid.bochihhott.R;
import com.aumaid.bochihhott.Utils.BottomNavigationViewHelper;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;

public class CartActivity extends AppCompatActivity implements RecyclerViewListener {

    private static final String TAG = "CartActivity";
    private static final int ACTIVITY_NUMBER = 1;

    /**
     * Firebase Stuff
     */
    private DatabaseReference mDatabaseRef;
    private FirebaseAuth mAuth;

    private Context mContext;
    private ArrayList<FoodItem> items;

    private TextView mTotal;
    private TextView mDelivery;
    private TextView mDeliveryText;
    private TextView mTotalText;

    private ImageView mBackButton;
    private Button mPlaceOrderBtn;
    private Button mContinueShoppingBtn;
    private ProgressBar mProgressBar;
    private RelativeLayout mEmptyCart;
    private RelativeLayout mCartButtons;
    private RelativeLayout mTotalSection;

    private int delivery = 0;
    private int total_price = 0;
    private int grand_total = 0;

    /**
     * Declaring Views or Widgets
     */
    private RecyclerView mCartRecyclerview;
    private CartItemAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cart);
        //Status bar color
        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);

        /**Binding Widgets*/
        bindViews();
        initButtons();

        setupBottomNavigationView();
        showOrdersList();
    }

    private void bindViews() {
        mAuth = FirebaseAuth.getInstance();
        mCartRecyclerview = findViewById(R.id.cartRecyclerView);
        mContext = CartActivity.this;
        mDelivery = findViewById(R.id.deliveryFeeTv);
        mTotal = findViewById(R.id.totalTv);
        mPlaceOrderBtn = findViewById(R.id.placeOrderBtn);
        mContinueShoppingBtn = findViewById(R.id.continueShoppingBtn);
        mBackButton = findViewById(R.id.backArrowBtn);
        mProgressBar = findViewById(R.id.progressBar);
        mDeliveryText = findViewById(R.id.deliveryText);
        mTotalText = findViewById(R.id.totalText);
        mEmptyCart = findViewById(R.id.emptyCartRel);
        mCartButtons = findViewById(R.id.cartButtons);
        mTotalSection = findViewById(R.id.totalSection);

        mProgressBar.setVisibility(View.VISIBLE);
        mCartButtons.setVisibility(View.GONE);
        mTotalSection.setVisibility(View.GONE);
    }

    private void showOrdersList() {
        items = new ArrayList<>();

        adapter = new CartItemAdapter(items, mContext);
        mCartRecyclerview.setLayoutManager(new LinearLayoutManager(this));
        mCartRecyclerview.setAdapter(adapter);

        //Load Cart items
        loadCartItems();

    }

    private void loadCartItems() {

        mDatabaseRef = FirebaseDatabase.getInstance().getReference("user_data/" + mAuth.getCurrentUser().getUid() + "/cart");

        mDatabaseRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                items.clear();
                if (snapshot.exists()) {
                    CartItem_ item = new CartItem_();
                    for (DataSnapshot ds : snapshot.getChildren()) {
                        Log.d(TAG, "onDataChange: Datasnapshot: " + ds.toString());
                        item = ds.getValue(CartItem_.class);
                        Log.d(TAG, "onDataChange: Item name: " + item.getItem().getItem_name());
                        items.add(item);
                    }

                    adapter.notifyDataSetChanged();
                    //Calculating Total
                    for (int i = 0; i < items.size(); i++) {
                        CartItem_ item_ = items.get(i);
                        total_price += Integer.parseInt(item_.getItem().getPrice()) * item_.getQuantity();
                        Log.d(TAG, "onDataChange: Total Price: " + total_price + " Quantity: " + item_.getQuantity());
                    }
                    grand_total = (total_price + delivery);
                    Log.d(TAG, "onDataChange: Quantity : " + item.getQuantity());
                    Log.d(TAG, "onDataChange: Delivery : " + delivery);
                    Log.d(TAG, "onDataChange: Grand Total: " + grand_total);
                    initTextViews();
                    mProgressBar.setVisibility(View.GONE);
                    mCartButtons.setVisibility(View.VISIBLE);
                    mTotalSection.setVisibility(View.VISIBLE);

                } else {
                    Log.d(TAG, "onDataChange: No items inside the cart");
                    //Present an illustration showing there are no items inside the cart
                    mProgressBar.setVisibility(View.GONE);
                    noItemsInsideCart();

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });

    }

    private void initTextViews() {
        Log.d(TAG, "initTextViews: Grand_Total: " + grand_total);
        if (delivery == 0) {
            mDelivery.setText("Free");
        } else {
            mDelivery.setText(Integer.toString(delivery));
        }
        mTotal.setText("â‚¹ " + Integer.toString(grand_total));
    }

    private void initButtons() {
        mBackButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        mPlaceOrderBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d(TAG, "onClick: Attempting to place an order");
                Intent intent = new Intent(mContext, CheckOutActivity.class);
                intent.putExtra("GRAND_TOTAL", Integer.toString(grand_total));
                startActivity(intent);
                finish();
            }
        });
    }

    /**
     * This method is used for the functioning of
     * Bottom Navigation bar
     */
    private void setupBottomNavigationView() {
        Log.d(TAG, "setupBottomNavigationView: setting up bottomNavigationView");
        BottomNavigationView bottomNavigationView = findViewById(R.id.bottomNavViewBar);
        /*
         * disabling animations in navbar
         * */
        BottomNavigationViewHelper.setUpBottomNavigationView(bottomNavigationView);
        /*
         * setting on create listener for
         * every icon
         * */
        BottomNavigationViewHelper.enableNavigation(mContext, bottomNavigationView);
        /*
         * highlighting the proper menu icon
         * while switching acivities
         * */
        Menu menu = bottomNavigationView.getMenu();
        MenuItem menuItem = menu.getItem(ACTIVITY_NUMBER);
        menuItem.setChecked(true);
    }

    private void noItemsInsideCart() {

        //Hiding content on the screen
        mTotalText.setVisibility(View.GONE);
        mTotal.setVisibility(View.GONE);
        mDelivery.setVisibility(View.GONE);
        mDeliveryText.setVisibility(View.GONE);
        mPlaceOrderBtn.setVisibility(View.GONE);
        mContinueShoppingBtn.setVisibility(View.GONE);

        mEmptyCart.setVisibility(View.VISIBLE);

    }

    private void removeCartItem(CartItem_ item) {
        String item_id = item.getItem_id();
        mDatabaseRef = FirebaseDatabase.getInstance().getReference("user_data")
                .child(mAuth.getCurrentUser().getUid())
                .child("cart");

        mDatabaseRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Log.d(TAG, "onDataChange: Deleting Nodes");
                for (DataSnapshot ds : dataSnapshot.getChildren()) {

                    if (ds.getValue(CartItem_.class).getItem_id().matches(item_id)) {
                        ds.getRef().removeValue();
                        items.remove(item);
                        adapter.notifyDataSetChanged();
                        if (items.isEmpty()) {
                            noItemsInsideCart();
                        }

                    }

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }


        });
    }

    @Override
    public void onRowClicked(int position) {

    }

    @Override
    public void onViewClicked(View v, int position) {
        if (v.getId() == R.id.removeBtn) {
            Log.d(TAG, "onViewClicked: Remove btn tapped");
            //remove item from the cart
            CartItem_ item_ = items.get(position);
            removeCartItem(item_);
        }
    }
}